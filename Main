package src.nn;

import java.awt.*;
import java.util.Scanner;

public class Main {
  public static Scanner scanner = new Scanner(System.in);

  public static final int ROW = 30;
  public static final int COL = 30;
  public static final int WALL_SIZE = 1;
  public static final int WALL_SIGN = -1;
  public static final int DIRECTION = 8;
  public static final int OBSTICLE = 3;
  public static final int NEXT_SIDE = 2;
  public static final int NO_VIEW = -9;
  public static final int NO_VIEW2 = -8;
  public static final int DEFAULT_NUM = 0;
  public static final int MAN_PLACE_X = 5;
  public static final int MAN_PLACE_Y = 5;

  public static final int[][] Vec = {
    {0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}, {-1, 0}, {-1, 1}
  };

  public static void main(String[] args) {
    int[][] nBoard = new int[ROW + (WALL_SIZE * 2)][COL + (WALL_SIZE * 2)];

    init(nBoard);
    MapBoard(nBoard, MAN_PLACE_X, MAN_PLACE_Y);
    Print(nBoard);
  }

  public static void init(int[][] nBoard) {
    // TODO wall
    for (int i = 0; i < ROW + (WALL_SIZE * 2); i++) {
      for (int j = 0; j < COL + (WALL_SIZE * 2); j++) {
        nBoard[i][j] = WALL_SIGN;
      }
    }

    for (int i = WALL_SIZE; i < ROW + WALL_SIZE; i++) {
      for (int j = WALL_SIZE; j < COL + WALL_SIZE; j++) {
        nBoard[i][j] = DEFAULT_NUM;
      }
    }

    nBoard[MAN_PLACE_X][MAN_PLACE_Y] = MAN_PLACE_X;

    Init_Obsticle(nBoard);
  }

  public static void Init_Obsticle(int[][] nBoard) {
    int nRow;
    int nCol;

    System.out.println("Enter obsticle loc(x,y): ");
    nRow = scanner.nextInt();
    nCol = scanner.nextInt();

    while (nRow != 0 || nCol != 0) {
      nBoard[nRow][nCol] = OBSTICLE;
      System.out.println("Enter obsticle loc(x,y): ");
      nRow = scanner.nextInt();
      nCol = scanner.nextInt();
    }
  }

  public static void MapBoard(int[][] nBoard, int nCorLocROw, int nCorLocCol) {
    int nMove = 0;
    int nSearchX;
    int nSearchY;

    for (int i = 1; i <= ROW / 2; i++) {
      nSearchX = nCorLocROw - i;
      nSearchY = nCorLocCol - i;

      for (int j = 0; j < 4; j++) {
        for (int k = 0; k < i * 2; k++) {
          if (nBoard[nSearchX][nSearchY] == OBSTICLE) {
            BlockEyeView(nBoard, nSearchX, nSearchY);
          }

          nSearchX += Vec[nMove][0];
          nSearchY += Vec[nMove][1];
        }
        nMove = (nMove + NEXT_SIDE) % DIRECTION;
      }
    }
  }

  public static void BlockEyeView(int[][] nBoard, int nCorX, int nCorY) {
    int nMove = VecCell(nCorX, nCorY);

    for (int nCount = 1; !EndView(nBoard, nCorX, nCorY, nMove); nCount++) {
      BlockView(nBoard, nCorX + Vec[nMove][0], nCorY + Vec[nMove][1], nMove, nCount);
      //                  MoveCenter(&nCorX, &nCorY, nMove);
    }
  }

  //      public static void MoveCenter(int* nCorX, int* nCorY,int nMove)
  //      {*nCorX += Vec[nMove].x;
  //  	*nCorY += Vec[nMove].y;
  //      }

  public static boolean EndView(int[][] nBoard, int nCorX, int nCorY, int nMove) {
    return nBoard[nCorX + Vec[nMove][0]][nCorY + Vec[nMove][1]] == WALL_SIGN;
  }

  public static void BlockView(int[][] nBoard, int nCorX, int nCorY, int nMove, int nCount) {
    nBoard[nCorX][nCorY] = NO_VIEW2;

    MoveDiagnal(nBoard, (nMove + 1 + 8) % 8, nCorX, nCorY, nCount);
    MoveDiagnal(nBoard, (nMove - 1 + 8) % 8, nCorX, nCorY, nCount);
  }

  public static void MoveDiagnal(int[][] nBoard, int nMove, int nCorX, int nCorY, int count) {

    for (int nCount = count; nCount > 0; nCount--) {
      if (CanMoveDiagnal(nBoard, nMove, nCorX, nCorY, nCount)) {
        nCorX += Vec[nMove][0];
        nCorY += Vec[nMove][1];

        nBoard[nCorX][nCorY] = NO_VIEW;
      }
    }
  }

  public static boolean CanMoveDiagnal(
      int[][] nBoard, int nMove, int nCorX, int nCorY, int nCount) {
    return (nBoard[nCorX + Vec[nMove][0]][nCorY + Vec[nMove][1]] != WALL_SIGN && nCount > 0);
  }

  public static int VecCell(int nObsticleRow, int nObsticleCol) {
    int diagnalx = CheckDerection(nObsticleRow, MAN_PLACE_X);
    int diagnaly = CheckDerection(nObsticleCol, MAN_PLACE_Y);
    int move;
    for (int i = 0; i < 8; i++) {
      if (diagnalx == Vec[i][0] && diagnaly == Vec[i][1]) {
        return i;
      }
    }

    return 1;
  }

  public static int CheckDerection(int nObstacleLoc, final int MAN_PLACE) {
    if (nObstacleLoc - MAN_PLACE < 0) {
      return -1;
    }
    return Math.abs(-nObstacleLoc - MAN_PLACE);
  }

  public static void Print(int[][] nBoard) {
    for (int i = 0; i < ROW + (WALL_SIZE * 2); i++) {
      for (int j = 0; j < COL + (WALL_SIZE * 2); j++) {
        if (nBoard[i][j] == 0) {
          System.out.println(" ");
        } else if (nBoard[i][j] == WALL_SIGN) {
          System.out.println("|");
        } else if (nBoard[i][j] < 0) {
          System.out.println("@");
        } else {
          System.out.println(nBoard[i][j]);
        }
      }
      System.out.println("\n");
    }
  }
}
